* Advanced Configuration
Two types of configuration files exist: root and project.
You probably only need to configure projects.
** Project
Project configurations are individual files located in the base directory of each individual project with the name '.px'
These files are meant to be tracked, as they primarily exist to deal with dependencies.
Any dependency in this file will be automatically handled once you switch to this project.\\\\

Individual dependencies are defined like this:
#+BEGIN_src
depType;[hostname;]name[;gitTagBranchOrHash][;AutoUpdate]
#+END_SRC

Here anything in brackets is optional. The last two are specific only to depType 't' (see next paragraph).\\
'name' is specific to the depType (also next paragraph).\\
'hostname' allows different settings for different computers as specified by their hostname.\\

'depType' is an individual charcter defining the type of dependency
   | d - development | A dependency in your project directory that your are developing in tandem.                                                                      |
   |                 | These are other projects in your project directory                                                                                              |
   |                 | No auto-version control management is done on these dependencies.                                                                               |
   |                 | 'name' is name of the dependency, equivalent to the directory name where the dependency is located.                                             |
   | l - lib         | Static dependencies, not meant to be edited, such as other peoples' projects on github.                                                         |
   |                 | If the dependency doesn't exist, it will try to download the dependency and install it via git.                                                 |
   |                 | Different versions of a code base will be treated/handled as separate dependencies                                                              |
   |                 | 'name' should be a url if you want integration with remote repositories.                                                                        |
   |                 | If not a url, these dependencies can be moved there automatically.                                                                              |
   |                 | Specify gitTagOrBranchOrHash to specify which tag/branch/commit to checkout.                                                                    |
   |                 | Specify AutoUpdate 1 if you want to automatically checkout the newest commit (if tracking a branch) each time you switch or reload the project. |
   | e - elsewhere   | Something that has been installed elsewhere on your machine.                                                                                    |
   |                 | Typically this is anything that has its own installation procedures that you plan on using in matlab and not developing (e.g. PsychToolbox).    |
   |                 | 'name' is name of the dependency, equivalent to the directory name where the dependency is located.                                             |

    %TODO EXAMPLES

** Root
Root configuration file is for settings that are meant to be applied Px itself, although by project settings can also be defined here.
Currently this file is only really good for enabling niche/experimental features.
*You do not need to create/change this to get Px working. In fact it is recommended to not do anything here.*

Px searches for the root configuration file in the given order
      installDir/Px.config (only on install, where it will then be moved to installDir/etc)
      installDir/etc/Px.config
      installDir/boot/Px.config
      userpath/$Px.config
      $HOME/.config/Px.config
      HOME/Px.config

Individual root configurations have the following form:
      setting;value
Or if you want to make it hostname specific
      setting;hostname;value

The following basic settings are avaialable:
    history     Whether to enable by project history in the Matlab command shell.
                This feature is currently experimental as it uses undocumented matlab code, which is subject to change with any new release; may not work for everybody.
                Defaults to 1 = on
                            0 = off
    gtags       Whether to update/generate gtags on project switch/reload
                Defaults to 1 = on
                            0 = off
    projectile  Automatically creates a .projectile file for certain type of emacs integration
                Defaults to 1 = off
                            0 = on

* Directory Structure
The directory structure is meant to be hidden, but can be useful if you use an external editor. In which case only ''bin'' below might be the most useful

Things are organized following Unix-like directory structure:
    | boot/  | where px is installed                                                                                           |
    | prj/   | Root project directory where projects under development go. (Where projects will be moved).                     |
    |        | The name of individual directories are read as individual projects, with the directory name as the project name |
    | wrk/   | This is where a virtual isolated directory will be created for your project on load, with all dependencies.     |
    | bin/   | Where compiled mex files will be stored on a by project basis.                                                  |
    | etc/   | Location for Px.config and other config files                                                                   |
    | lib/   | Where static dependencies will be downloaded to.                                                                |

These directories are not used by Px directly
    | tmp/   | Where temporary files        |
    | var/   | Where log files will be kept |
    | media/ | Where figures will be saved  |
    | data/  | Where data will be saved     |


For logging capabilities, check out my other project 'Pr'
For by-project figure saving check out the class 'Fig' in 'MatbaseTools'

* Related projects
MatBaseTools - extensions to existing matlab types, including all the optmized versions of system tools used in Px.
MatPlotTools - Same idea of MatBaseTools but for plotting. Integrates with Px for by-project figure saving.
Pr - the matlab progress bar of your dreams. Integrates  with Px for logging functionality.

All my other matlab projects use px for dependency and environemnt configuration.


* Justificaiton
Matlab has a lot of good things about it, but one thing that is terrible is project management.
Mostly, I see people in research science managing their code in one of the following ways:
- Static set of a few directories where all code is placed.
- Hierarchical project/directory structure, and rerunning genpath or addpath everytime a new directory is added.
- Projects have flat structure and are cd'd into

There are problems with all of these, especially as more projects are added, when trying to integrate somebody else's code.
Matlab's environment simplicity is good for playing around, or for small projects, but fails outside of this scope.

